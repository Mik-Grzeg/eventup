CREATE TABLE IF NOT EXISTS staff_user_log_infos (
  user_id INT PRIMARY KEY,
  -- in case we wanted to make it multi-tenant SAS
  -- group_id INT,
  email text UNIQUE NOT NULL,
  password_hashed text,
  password_salt VARCHAR(50)
  -- CONSTRAINT fk_group
  --   FOREIGN KEY(group_id)
  --     REFERENCES groups(group_id)
  -- in case we wanted to migrate to another hashing algorithm, we need to know what was the previous one 
  -- password_hash_algorithm  
);

CREATE TABLE IF NOT EXISTS staff_user_accounts (
  user_id INT PRIMARY KEY REFERENCES staff_user_log_infos (user_id),
  phone_number text UNIQUE NOT NULL,
  first_name VARCHAR(255),
  last_name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS staff_user_roles (
  role_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  role_description VARCHAR(20)
);

INSERT INTO staff_user_roles (role_id, role_description) VALUES 
  (1, 'read-only'),
  (2, 'assistant'),
  (3, 'manager'),
  (4, 'admin');

CREATE TYPE permission_action AS ENUM ('view', 'edit', 'manage', 'admin');
CREATE TABLE IF NOT EXISTS permissions (
  permission_id INT GENERATED BY DEFAULT AS IDENTITY,
  action permission_action,
  PRIMARY KEY (permission_id)
);

INSERT INTO permissions (permission_id, action) VALUES
  (1, 'view'),
  (2, 'edit'),
  (3, 'manage'),
  (4, 'admin');

CREATE TABLE IF NOT EXISTS granted_permissions (
  role_id INT NOT NULL,
  permission_id INT NOT NULL, 
  CONSTRAINT fk_permission
    FOREIGN KEY(permission_id)
    REFERENCES permissions(permission_id),
  CONSTRAINT fk_role
    FOREIGN KEY(role_id)
    REFERENCES staff_user_roles(role_id)
);

INSERT INTO granted_permissions (role_id, permission_id) VALUES 
  (1, 1),
  (2, 1),
  (2, 2),
  (3, 1),
  (3, 2),
  (3, 3),
  (4, 1),
  (4, 2),
  (4, 3),
  (4, 4);
